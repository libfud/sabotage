This is sabotage, an experimental distribution based on musl libc and busybox.

Currently sabotage supports i386 and x86_64, MIPS, PowerPC32 and ARM(v4t+).

For simplicity reasons, sabotage does *not* support cross-compilation.
In order to build for your desired platform, you need an existing native 
environment (for example pre-built aboriginal linux qemu images).

Requirements:
- ~4G free disk space
- root access
- usual GCC 4 toolchain
- git
- a bootloader of your choice (extlinux is favored)
- lots of time and a fair bit of Linux knowledge

This system has been built on Debian 6.0 and 7.0, Ubuntu 13.04, 
Suse 11.4, aboriginal 1.1 and 1.2 systems, and Fedora 19.

You can bootstrap your own build from the scripts at 

               https://github.com/rofl0r/sabotage

or use a ready-to-boot disk image either for qemu, vbox or to extract the rootfs,
to be found at:

           http://ftp.barfooze.de/pub/sabotage/ 

	   or
	   http://foss.aueb.gr/mirrors/linux/sabotage/


You also can netboot the install kernel directly (use pxelinux from
somewhere).

READ THE COOKBOOK FIRST.

Build instructions:  Caveat emptor, this is all pre-alpha!
DO NOT RUN SCRIPTS YOU HAVE NOT READ.

% cp KEEP/config.stage0 config
% vi config
  # set SABOTAGE_BUILDDIR, A, and MAKE_THREADS variables. 
  # the other values can be left as-is usually.

% ./build-stage 0  # build toolchain (~2min on an AMD FX 8core, 75min on ARM Cortex A8 800Mhz)
% ./enter-chroot   # enter $R chrooted, needs root password
% cd /src
% vi config        # set your MAKE_THREADS, etc
% butch install stage1
# and after that, feel free to install optional packages:
# you can look at what's available using 'ls /src/pkg'

# if you want the default kernel (otherwise you have to build it yourself)
# Beware: Default kernel settings may not support your hardware.
% butch install kernel

% butch install xorg # install everything needed to get xfbdev
% butch install pkg # installs useful things, such as file, git, gdb ...
% butch install world #installs almost everything

Run "butch" and look at the usage information it outputs for further options.
butch uses build templates, please take a look at KEEP/butch_template_configure_cached.txt
to see how it works.

when you're done, exit the chroot and use utils/write-hd-image.sh to create an image file.
this can be directly booted in qemu, to use it in vbox use VBoxManage convertfromraw.
or you can simply copy the rootfs in $R to your medium of choice.

*** RUNNING SABOTAGE FOR THE FIRST TIME ***

The default root password is "sabotage".

you may want to generate some sshd-keys for sshd to use; use

% butch install sshd-keys

the sshd itself can be started using /sbin/sshd

check and edit /etc/rc.local for things you may want to autostart,
such as network config, dhcp, linux console keymap...

if you have X installed, you may want to edit /bin/X for the correct evdev
settings (see examples provided in there), then run "startx".
also check /etc/xinitrc for X11 keyboard config.

NOTE TO CONTRIBUTORS
if you want to add packages, start from KEEP/package.template .
cp KEEP/package.template pkg/my_new_pkg
use utils/dlinfo.sh http://1.2.3.4/my_new_pkg.tar.xz
that'll spit out the filesize, sha512sum boilerplate for easy copy&paste.

please do not use HTTPS or FTP mirrors.
HTTPS is unsupported by busybox wget, and FTP is a broken protocol from the 70ies
which needs a second data connection (i.e. open port on the client).
this prevents FTP from working when behind a NAT router or socks proxy.
Downloads from git or other source repositories is an absolute no-go.

please use unified diff format  (diff -u) for patches, as this usually allows
to use the same patches on newer versions as well.

since sabotage ships all tarballs when an ISO or HD image is distributed (to
fulfill the GPL), space considerations are a top issue.
so if available, ALWAYS USE a TAR.XZ (preferred) or TAR.BZ2 download URL.
in the former case, xz has to be added to the [deps] section.

it is necessary that you create git branches for your work:
this allows me to checkout your changes and rebase as i see fit,
and you can easily pull back into your master without getting merge conflicts.

do not commit more than one change/package in a single commit, as it makes
it much more work than needed to pick the good commits and leave away bad ones.


CONTACT
There is a mailinglist sabotage@lists.openwall.com, mail
sabotage-subscribe@lists.openwall.com and follow instructions to get
on it.  Archives are at http://openwall.com/lists/sabotage/
You can also /join #sabotage or #musl on irc.freenode.net for realtime help.




*** SABOTAGE IN USERSPACE or "Co-Musl" ***
this is another mode that lets you use sabotage packages in a custom prefix.

IT IS HIGHLY EXPERIMENTAL at this point. so expect some packages failing to build.

(for usage parallel to an existing system, without chroot.)
this mode is not heavily optimized or tested, and builds some stuff that is not really
necessary. however its quite handy to use sw on an existing system without having to
use a chroot.

  cp KEEP/config.local .
  nano config.local # edit paths
  . ./config.local
  ./build-stage u

  # after finished, you can 
  cd $R
  export PATH="$R/bin:$PATH"
  butch install ncurses nano etc etc


